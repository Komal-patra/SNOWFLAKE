CREATE DATABASE EVENT;

CREATE SCHEMA EVENT_SCHEMA;

USE DATABASE EVENT;

USE SCHEMA EVENT_SCHEMA;

CREATE OR REPLACE EVENT TABLE EVENT_TABLE_PAYMENTS;

ALTER ACCOUNT SET EVENT_TABLE = EVENT.EVENT_SCHEMA.EVENT_TABLE_PAYMENTS;

ALTER SESSION SET LOG_LEVEL=INFO;

CREATE OR REPLACE PROCEDURE PAYMENTS_EVENT_PROC(PARAMETER VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
    QUERY VARCHAR;
    RECORD_COUNT INT;
    START_DATE TIMESTAMP;
    END_DATE TIMESTAMP;
BEGIN
    -- Record the start time
    SET START_DATE = CURRENT_TIMESTAMP();
    SYSTEM$LOG('INFO', 'PROCEDURE STARTED AT: ' || TO_CHAR(START_DATE, 'YYYY-MM-DD HH24:MI:SS'));

    -- Use the passed parameter in the query or logging
    SYSTEM$LOG('INFO', 'Parameter Passed: ' || PARAMETER);

    -- Define the query
    SET QUERY = 'INSERT INTO EVENT.EVENT_SCHEMA.MEMBERS_BKP SELECT * FROM EVENT.EVENT_SCHEMA.MEMBERS LIMIT 3';

    -- Execute the query
    EXECUTE IMMEDIATE QUERY;

    -- Get the number of rows inserted
    SET RECORD_COUNT = ROW_COUNT();

    -- Log the number of records inserted
    IF (RECORD_COUNT > 0) THEN
        SYSTEM$LOG('INFO', 'TOTAL NUMBER OF RECORDS INSERTED: ' || RECORD_COUNT);
    END IF;

    -- Record the end time
    SET END_DATE = CURRENT_TIMESTAMP();
    SYSTEM$LOG('INFO', 'PROCEDURE COMPLETED AT: ' || TO_CHAR(END_DATE, 'YYYY-MM-DD HH24:MI:SS'));

    -- Return success message
    RETURN 'SUCCESSFULLY COMPLETED';
END;
$$;


CALL PAYMENTS_EVENT_PROC('HELLO');

SELECT * FROM EVENT.EVENT_SCHEMA.EVENT_TABLE_PAYMENTS;


CREATE OR REPLACE TABLE MEMBERS (
ID INT,
NAME STRING DEFAULT NULL,
FEE INT NULL
);

INSERT INTO MEMBERS (ID, NAME, FEE) VALUES(1, 'KOMAL',0),(2, 'NIKHIL',0), (3, 'RIDDHI',0),(4,'SIDDHI',0),(5, 'ASHA',0);

CREATE OR REPLACE TABLE MEMBERS_BKP (
ID INT,
NAME STRING DEFAULT NULL;
FEE INT NULL
);
